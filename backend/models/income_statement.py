from sqlalchemy import Column, Integer, String, Float, BigInteger, Date, DateTime, UniqueConstraint
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()


class IncomeStatement(Base):

    __table__ = "income_statement"

    id = Column(Integer, primary_key=True, autoincrement=True, comment="Unique ID for each record")
    symbol = Column(String(10), nullable=False, comment="Stock ticker symbol (e.g., AAPL)")
    date = Column(Date, nullable=False, comment="Fiscal year-end date (e.g., 2024-09-28)")
    revenue = Column(BigInteger, nullable=False, comment="Total revenue or sales generated by the company")
    gross_profit = Column(BigInteger, nullable=False, comment="Gross profit (revenue - cost of goods sold)")
    gross_profit_ratio = Column(Float, comment='Gross profit as a percentage of revenue')
    operating_income = Column(BigInteger, nullable=False, comment='Earnings before interest and taxes (EBIT)')
    operating_income_ratio = Column(Float, comment='Operating income as a percentage of revenue')
    net_income = Column(BigInteger, nullable=False, comment='Net income (profit after all expenses, taxes, etc.)')
    net_income_ratio = Column(Float, comment='Net income as a percentage of revenue')
    eps = Column(Float, nullable=False, comment='Earnings per share (basic)')
    operating_expenses = Column(BigInteger, comment='Total operating expenses related to core business operations')
    research_and_development_expenses = Column(BigInteger, comment='Expenses related to research and development activities')
    income_tax_expense = Column(BigInteger, comment='Total income tax expense paid by the company')
    depreciation_and_amortization = Column(BigInteger, comment='Depreciation and amortization expenses (non-cash)')
    ebitda = Column(BigInteger, comment='Earnings before interest, taxes, depreciation, and amortization')
    total_other_income_expenses_net = Column(BigInteger, comment='Net total of other income and expenses')
    reported_currency = Column(String(10), comment='Currency in which financials are reported (e.g., USD)')
    filling_date = Column(Date, comment='Date when the financial report was filed')
    accepted_date = Column(DateTime, comment='Date when the financial report was accepted by the SEC')
    period = Column(String(5), comment='Reporting period, typically "FY" for fiscal year')

    __table_args__ = (
        UniqueConstraint('symbol', 'date', name='unique_symbol_date')
    )
